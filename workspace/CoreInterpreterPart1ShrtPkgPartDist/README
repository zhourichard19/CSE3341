List of folders and files

README
    this file

Runfile
    The requested file showing how to run the program from the command
    line (without the required argument)
    
RunfileEnhanced
    This file was not requested, but it shows how to run the program
    TokenizerTestEnhanced from the command line (without the required argument)
    
runfilebased.sh
    A shell script, based on the contents of a runfile and a data folder both
    given as arguments, enabling the running of many tests of a test driver
    as the result of issuing just one command.
    
runfilebased-description.txt
    A description of the shell script mentioned above.
    
testRunfile.sh
    A shell script, based on the contents of Runfile and folder data, enabling
    the running of many tests of the test driver as the result of issuing
    just one command with no arguments.
    
testRunfileEnhanced.sh
    A shell script, based on the contents of RunfileEnhanced and folder
    dataEnhanced, enabling the running of many tests of the test driver
    as the result of issuing just one command with no arguments.
    
runbothsets.sh
    A shell script that tests both TokenizerTest and TokenizerTestEnhanced.

runwith.sh
    A shell script that runs what is given in Runfile on the one data
    file that the user gives as the one argument to this script.
    
runenhancedwith.sh
    A shell script that runs what is given in RunfileEnhanced on the one data
    file that the user gives as the one argument to this script.
    
testscript.sh
    A shell script enabling the running of many tests of the test driver
    as the result of issuing just one command; the command is given as
    an argument, so this script is independent of any runfile.
    
testscript-description.txt
    A description of the shell script mentioned above.
    
src/edu/c3341/Tokenizer.java
    The Tokenizer interface (Java source)
src/edu/c3341/TokenKind.java
    TokenKind enum for a "subset" of the Core language tokens (Java source)
src/edu/c3341/Tokenizer1.java
    Tokenizer1 class implementing Tokenizer for a "subset" of the Core
    language tokens (Java source)
src/edu/c3341/TokenizerTest.java
    The test driver for Tokenizer that behaves as requested by Part 1
src/edu/c3341/TokenizerTestEnhanced.java
    An enhanced test driver that shows identifier names and integer values;
    it also concludes with the end-of-file token, 33.
src/edu/c3341/Assign.java
    This prints, parses and executes the assign statement in the core grammar 
    and allows for variables to be assigned to identifiers
src/edu/c3341/Comp.java
    This prints, parses and executes the comparing operators. This includes 
    checking if variables are greater than, less than, or equal to each other.
src/edu/c3341/CompOp.java
    This prints, parses and executes the comparing operators statement Which are
    the actual signs of what is being calculated.
src/edu/c3341/Cond.java
    This prints, parses and executes the Condition statement in the core grammar 
    and allows for variables to be evaluated into boolean expressions. This 
    could be checking ands nots and ors.
src/edu/c3341/Decl.java
    This prints, parses and executes the Declaration of a variable. This would 
    allow a variable to be an identifier.
src/edu/c3341/DeclSeq.java
    This prints, parses and executes the Declaration sequence which is a grammar
    for whether the declaration is a sequence of delcarations or just a delaration
src/edu/c3341/Exp.java
    This prints, parses and executes the exp which is an expression of math.
    This would e a statement that multiplies, divides, subtracts, or adds terms 
    together.
src/edu/c3341/Id.java
    This prints, parses and executes the Id statement which would be a letter 
    that could e made as a string or as a variable to be written or read into. 
    On top of this, the variable is also used in statements and declarations
src/edu/c3341/IdList.java
    This prints, parses and executes the list of Ids which is a string and can 
    become a variable and evaluates that into being read or written into
src/edu/c3341/If.java
    This prints, parses and executes the If statement in the core grammar 
    which has 2 alternatives and that allows for an if-else or a if- end.
src/edu/c3341/In.java
    This prints, parses and executes the In statement which is what is being put
    as the input file and read into the interpreter
src/edu/c3341/Loop.java
    This prints, parses and executes the Loop statement in the core grammar 
    and allows for a while loop to be used inside of the core language
src/edu/c3341/No.java
    This prints, parses and executes the No statement in the core grammar 
    which checks for numbers and allows for those to be used in Core 
src/edu/c3341/Op.java
    This prints, parses and executes the Operators in the ore grammar. This does
    not evaluate anything but gets the actual operators + - *.
src/edu/c3341/Out.java
    This prints, parses and executes the out statement which allows for the
    program to write to a file elsewhere the output
src/edu/c3341/Prog.java
    This prints, parses and executes the Prog statement which is the first 
    statement in the grammar and initializes the program. it contains
    a begin and also goes to the declaration.
src/edu/c3341/Reporter.java
    This is responsible for reporting the errors that show up to the console
src/edu/c3341/Stmt.java
    This prints, parses and executes the Statement statement in the core grammar 
    which is a series of letters that are not declaration and could be a sequence
    This includes the assign,if,loop,in,and out
src/edu/c3341/StmtSeq.java
    This prints, parses and executes the Sequence of possible statments which 
    are multiple commands into the grammar and checking how many it is in a row
src/edu/c3341/Term.java
    This prints, parses and executes the term statement which is a multiplication 
    function or just a number.
    
data/test01
data/test02
data/test03
data/test04
data/test05
data/test06
data/test07
data/test08
data/test09
data/test10
data/test11
data/test12
    Each of the files listed above contains test input for either
    TokenizerTest or TokenizerTestEnhanced.
data/test01expected-output
data/test02expected-output
data/test03expected-output
data/test04expected-output
data/test05expected-output
data/test06expected-output
data/test07expected-output
data/test08expected-output
data/test09expected-output
data/test10expected-output
data/test11expected-output
data/test12expected-output
    Expected output for TokenizerTest
data/test01actual-output
data/test02actual-output
data/test03actual-output
data/test04actual-output
data/test05actual-output
data/test06actual-output
data/test07actual-output
data/test08actual-output
data/test09actual-output
data/test10actual-output
data/test11actual-output
data/test12actual-output
    Actual output for TokenizerTest
    
dataEnhanced/test01E
dataEnhanced/test02E
dataEnhanced/test03E
dataEnhanced/test12E
    Each of the files listed above contains test input for either
    TokenizerTest or TokenizerTestEnhanced.

dataEnhanced/test01Eexpected-output
dataEnhanced/test02Eexpected-output
dataEnhanced/test03Eexpected-output
dataEnhanced/test12Eexpected-output
    Expected output for TokenizerTestEnhanced

dataEnhanced/test01Eactual-output
dataEnhanced/test02Eactual-output
dataEnhanced/test03Eactual-output
dataEnhanced/test12Eactual-output
    Actual output for TokenizerTestEnhanced

doc/design-and-user-manual.txt
    The requested documentation file

test/TokenizerTestDriverTest.java
    A JUnit test fixture for testing TokenizerTest.

test/TokenizerTestDriverEnhcancedTest.java
    A JUnit test fixture for testing TokenizerTestEnhcanced.
    
Both of the test fixtures above rely on the test runner being single-threaded.

The following folders and files are generated by and used by Eclipse
bin/
lib/
.checkstyle
.classpath
.project

Instructions to Grader

The zip file is an archived Eclipse project.  If you wish, you may
import it into Eclipse and use Run Configurations to run it from
there.

Alternatively, you can run the test driver from within the project's root
directory. For example, I have run a test using the following command at
a stdlinux terminal command prompt:

java -cp ./bin edu/c3341/TokenizerTest ./data/test01

Of course, you may wish first to compile this program yourself to assure
that the class files are indeed coming from the java source files. With
the project's root directory as your current directory, issue the following
command to replace the class files in the bin directory:

javac -d bin src/edu/c3341/*.java
